package sample

import "github.com/fuwjax/gopase/parser"

func PegGrammar() *parser.Grammar {
	grammar := parser.NewGrammar()
	grammar.AddRule("Grammar", parser.Seq(parser.Ref("Line"), parser.Rep(parser.Seq(parser.Ref("EOL"), parser.Ref("Line"))), parser.Opt(parser.Ref("EOL")), parser.Ref("EOF")))
	grammar.AddRule("Line", parser.Alt(parser.Ref("Rule"), parser.Ref("Comment"), parser.Ref("WS")))
	grammar.AddRule("Rule", parser.Seq(parser.Ref("WS"), parser.Ref("Name"), parser.Ref("WS"), parser.Lit(`=`), parser.Ref("WS"), parser.Ref("Expr"), parser.Ref("WS")))
	grammar.AddRule("Expr", parser.Seq(parser.Ref("Seq"), parser.Rep(parser.Seq(parser.Ref("WS"), parser.Lit(`/`), parser.Ref("WS"), parser.Ref("Seq")))))
	grammar.AddRule("Seq", parser.Seq(parser.Ref("Prefix"), parser.Rep(parser.Seq(parser.Ref("WS"), parser.Ref("Prefix")))))
	grammar.AddRule("Prefix", parser.Alt(parser.Ref("AndExpr"), parser.Ref("NotExpr"), parser.Ref("Suffix")))
	grammar.AddRule("AndExpr", parser.Seq(parser.Lit(`&`), parser.Ref("WS"), parser.Ref("Suffix")))
	grammar.AddRule("NotExpr", parser.Seq(parser.Lit(`!`), parser.Ref("WS"), parser.Ref("Suffix")))
	grammar.AddRule("Suffix", parser.Alt(parser.Ref("OptExpr"), parser.Ref("RepExpr"), parser.Ref("ReqExpr"), parser.Ref("Primary")))
	grammar.AddRule("OptExpr", parser.Seq(parser.Ref("Primary"), parser.Ref("WS"), parser.Lit(`?`)))
	grammar.AddRule("RepExpr", parser.Seq(parser.Ref("Primary"), parser.Ref("WS"), parser.Lit(`*`)))
	grammar.AddRule("ReqExpr", parser.Seq(parser.Ref("Primary"), parser.Ref("WS"), parser.Lit(`+`)))
	grammar.AddRule("Primary", parser.Alt(parser.Ref("Dot"), parser.Ref("ParExpr"), parser.Ref("Literal"), parser.Ref("CharClass"), parser.Ref("Ref")))
	grammar.AddRule("Dot", parser.Lit(`.`))
	grammar.AddRule("ParExpr", parser.Seq(parser.Lit(`(`), parser.Ref("WS"), parser.Ref("Expr"), parser.Ref("WS"), parser.Lit(`)`)))
	grammar.AddRule("Literal", parser.Alt(parser.Ref("SingleLit"), parser.Ref("DoubleLit")))
	grammar.AddRule("CharClass", parser.Ref("Pattern"))
	grammar.AddRule("Ref", parser.Ref("Name"))
	grammar.AddRule("Comment", parser.Seq(parser.Lit(`#`), parser.Rep(parser.Seq(parser.Not(parser.Ref("EOL")), parser.Dot()))))
	grammar.AddRule("Name", parser.Seq(parser.Cls(`[_a-zA-Z]`), parser.Rep(parser.Cls(`[_a-zA-Z0-9]`))))
	grammar.AddRule("Pattern", parser.Seq(parser.Lit(`[`), parser.Req(parser.Alt(parser.Lit(`\]`), parser.Cls(`[^\]]`))), parser.Lit(`]`)))
	grammar.AddRule("SingleLit", parser.Seq(parser.Lit(`'`), parser.Rep(parser.Alt(parser.Seq(parser.Lit(`\`), parser.Ref("SingleEscape")), parser.Ref("SinglePlain"))), parser.Lit(`'`)))
	grammar.AddRule("DoubleLit", parser.Seq(parser.Lit(`"`), parser.Rep(parser.Alt(parser.Seq(parser.Lit(`\`), parser.Ref("DoubleEscape")), parser.Ref("DoublePlain"))), parser.Lit(`"`)))
	grammar.AddRule("SingleEscape", parser.Cls(`[\\'nrt]`))
	grammar.AddRule("DoubleEscape", parser.Cls(`[\\"nrt]`))
	grammar.AddRule("SinglePlain", parser.Req(parser.Cls(`[^\\']`)))
	grammar.AddRule("DoublePlain", parser.Req(parser.Cls(`[^\\"]`)))
	grammar.AddRule("WS", parser.Rep(parser.Cls(`[ \t]`)))
	grammar.AddRule("EOL", parser.Cls(`[\n\r]`))
	grammar.AddRule("EOF", parser.Not(parser.Dot()))
	return grammar
}
