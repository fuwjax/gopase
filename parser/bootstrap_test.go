package parser_test

import (
	"testing"

	"github.com/fuwjax/gopase/parser"
	"github.com/fuwjax/gopase/when"
)

func testParse(root, input string) when.WhenOpErr[any] {
	return func() (any, error) {
		return parser.BootstrapFrom(root, input)
	}
}

func TestBootstrap(t *testing.T) {
	when.YouDoErr("EOF empty input", testParse("EOF", "")).Expect(t, "")
	when.YouDoErr("EOF nonempty input", testParse("EOF", "a")).ExpectError(t, "at 'a' 1:1 (1) expected not something\nwhile in EOF")
	when.YouDoErr("EOL newline", testParse("EOL", "\n")).Expect(t, "\n")
	when.YouDoErr("EOL non newline", testParse("EOL", "a")).ExpectError(t, "at 'a' 1:1 (1) expected [\\n\\r]\nwhile in EOL")
	when.YouDoErr("WS spaces", testParse("WS", "   ")).Expect(t, "   ")
	when.YouDoErr("WS leading space", testParse("WS", " a ")).Expect(t, " ")
	when.YouDoErr("WS no leading space", testParse("WS", "a ")).Expect(t, "")
	when.YouDoErr("Name simple", testParse("Name", "bob")).Expect(t, "bob")
	when.YouDoErr("Name series", testParse("Name", "B0B ross")).Expect(t, "B0B")
	when.YouDoErr("Name leading space", testParse("Name", " bob")).ExpectError(t, "at ' ' 1:1 (1) expected [_a-zA-Z]\nwhile in Name")
	when.YouDoErr("Name number", testParse("Name", "1234")).ExpectError(t, "at '1' 1:1 (1) expected [_a-zA-Z]\nwhile in Name")
	when.YouDoErr("Pattern range", testParse("Pattern", "[a-z]")).Expect(t, "[a-z]")
	when.YouDoErr("Pattern escape", testParse("Pattern", "[\\\"]")).Expect(t, "[\\\"]")
	when.YouDoErr("Pattern escape 2", testParse("Pattern", "[\"]")).Expect(t, "[\"]")
	when.YouDoErr("Pattern negation", testParse("Pattern", "[^\\n]")).Expect(t, "[^\\n]")
	when.YouDoErr("Pattern missing escape", testParse("Pattern", "[]]")).ExpectError(t, "at ']' 1:2 (2) expected \\\nat ']' 1:2 (2) expected [^\\]]\nwhile in Pattern")
	when.YouDoErr("Pattern non class", testParse("Pattern", "1234")).ExpectError(t, "at '1' 1:1 (1) expected [\nwhile in Pattern")
	when.YouDoErr("Comment basic", testParse("Comment", "#comment")).Expect(t, "#comment")
	when.YouDoErr("Comment empty", testParse("Comment", "#")).Expect(t, "#")
	when.YouDoErr("Comment basic", testParse("Comment", "not a comment")).ExpectError(t, "at 'n' 1:1 (1) expected #\nwhile in Comment")
	when.YouDoErr("Ref name", testParse("Ref", "bob")).Expect(t, parser.Ref("bob"))
	when.YouDoErr("Ref number", testParse("Ref", "1234")).ExpectError(t, "at '1' 1:1 (1) expected [_a-zA-Z]\nwhile in Name\nwhile in Ref")
	when.YouDoErr("Char Class name", testParse("CharClass", "[a-z]")).Expect(t, parser.Cls("[a-z]"))
	when.YouDoErr("Char Class number", testParse("CharClass", "1234")).ExpectError(t, "at '1' 1:1 (1) expected [\nwhile in Pattern\nwhile in CharClass")
	when.YouDoErr("Literal double", testParse("Literal", "\"hello, world\"")).Expect(t, parser.Lit("hello, world"))
	when.YouDoErr("Literal single", testParse("Literal", "'hello, world'")).Expect(t, parser.Lit("hello, world"))
	when.YouDoErr("Literal number", testParse("Literal", "1234")).ExpectError(t, "at '1' 1:1 (1) expected '\nwhile in SingleLit\nat '1' 1:1 (1) expected \"\nwhile in DoubleLit\nwhile in Literal")
	when.YouDoErr("Literal backslash", testParse("Literal", `'\\'`)).Expect(t, parser.Lit(`\`))
	when.YouDoErr("Dot dot", testParse("Dot", ".")).Expect(t, parser.Dot())
	when.YouDoErr("Dot not dot", testParse("Dot", "1234")).ExpectError(t, "at '1' 1:1 (1) expected .\nwhile in Dot")
	when.YouDoErr("Primary dot", testParse("Primary", ".")).Expect(t, parser.Dot())
	when.YouDoErr("Primary double", testParse("Primary", "\"double\"")).Expect(t, parser.Lit("double"))
	when.YouDoErr("Primary single", testParse("Primary", "'single'")).Expect(t, parser.Lit("single"))
	when.YouDoErr("Primary class", testParse("Primary", "[^\"]")).Expect(t, parser.Cls("[^\"]"))
	when.YouDoErr("Primary ref", testParse("Primary", "RefName")).Expect(t, parser.Ref("RefName"))
	when.YouDoErr("Required simple", testParse("ReqExpr", "[0-9]+")).Expect(t, parser.Req(parser.Cls("[0-9]")))
	when.YouDoErr("Required inner space", testParse("ReqExpr", "'hi'  +")).Expect(t, parser.Req(parser.Lit("hi")))
	when.YouDoErr("Required missing plus", testParse("ReqExpr", "Bob")).ExpectError(t, "at EOF 1:4 (4) expected +\nwhile in ReqExpr")
	when.YouDoErr("Repeated simple", testParse("RepExpr", "\"yup\"*")).Expect(t, parser.Rep(parser.Lit("yup")))
	when.YouDoErr("Repeated inner space", testParse("RepExpr", ".  *")).Expect(t, parser.Rep(parser.Dot()))
	when.YouDoErr("Repeated missing star", testParse("RepExpr", "Bob")).ExpectError(t, "at EOF 1:4 (4) expected *\nwhile in RepExpr")
	when.YouDoErr("Optional simple", testParse("OptExpr", "RefName?")).Expect(t, parser.Opt(parser.Ref("RefName")))
	when.YouDoErr("Optional inner space", testParse("OptExpr", ".  ?")).Expect(t, parser.Opt(parser.Dot()))
	when.YouDoErr("Optional missing question", testParse("OptExpr", "Bob")).ExpectError(t, "at EOF 1:4 (4) expected ?\nwhile in OptExpr")
	when.YouDoErr("Suffix required", testParse("Suffix", ".+")).Expect(t, parser.Req(parser.Dot()))
	when.YouDoErr("Suffix repeated", testParse("Suffix", "\"double\" *")).Expect(t, parser.Rep(parser.Lit("double")))
	when.YouDoErr("Suffix optional", testParse("Suffix", "[^\"]?")).Expect(t, parser.Opt(parser.Cls("[^\"]")))
	when.YouDoErr("Suffix unadorned", testParse("Suffix", "Bob")).Expect(t, parser.Ref("Bob"))
	when.YouDoErr("Negative Lookahead simple", testParse("NotExpr", "!RefName")).Expect(t, parser.Not(parser.Ref("RefName")))
	when.YouDoErr("Negative Lookahead inner space", testParse("NotExpr", "!  .  ?")).Expect(t, parser.Not(parser.Opt(parser.Dot())))
	when.YouDoErr("Negative Lookahead missing bang", testParse("NotExpr", "Bob")).ExpectError(t, "at 'B' 1:1 (1) expected !\nwhile in NotExpr")
	when.YouDoErr("Positive Lookahead simple", testParse("AndExpr", "&RefName")).Expect(t, parser.See(parser.Ref("RefName")))
	when.YouDoErr("Positive Lookahead inner space", testParse("AndExpr", "&  .  ?")).Expect(t, parser.See(parser.Opt(parser.Dot())))
	when.YouDoErr("Positive Lookahead missing and", testParse("AndExpr", "Bob")).ExpectError(t, "at 'B' 1:1 (1) expected &\nwhile in AndExpr")
	when.YouDoErr("Prefix not", testParse("Prefix", "!.")).Expect(t, parser.Not(parser.Dot()))
	when.YouDoErr("Prefix see", testParse("Prefix", "& \"double\" *")).Expect(t, parser.See(parser.Rep(parser.Lit("double"))))
	when.YouDoErr("Prefix not", testParse("Prefix", "[^\"]")).Expect(t, parser.Cls("[^\"]"))
	when.YouDoErr("Sequence simple", testParse("Seq", "A B C")).Expect(t, parser.Seq(parser.Ref("A"), parser.Ref("B"), parser.Ref("C")))
	when.YouDoErr("Sequence stuff", testParse("Seq", ". 'hi' [a-z]")).Expect(t, parser.Seq(parser.Dot(), parser.Lit("hi"), parser.Cls("[a-z]")))
	when.YouDoErr("Sequence single", testParse("Seq", "Jim")).Expect(t, parser.Ref("Jim"))
	when.YouDoErr("Alternative simple", testParse("Expr", "A / B / C")).Expect(t, parser.Alt(parser.Ref("A"), parser.Ref("B"), parser.Ref("C")))
	when.YouDoErr("Alternative stuff", testParse("Expr", ". 'hi' / [a-z]")).Expect(t, parser.Alt(parser.Seq(parser.Dot(), parser.Lit("hi")), parser.Cls("[a-z]")))
	when.YouDoErr("Alternative single", testParse("Expr", "Jim")).Expect(t, parser.Ref("Jim"))
	when.YouDoErr("Parens simple", testParse("ParExpr", "(A B C)")).Expect(t, parser.Seq(parser.Ref("A"), parser.Ref("B"), parser.Ref("C")))
	when.YouDoErr("Parens stuff", testParse("ParExpr", "('hi' / [a-z])")).Expect(t, parser.Alt(parser.Lit("hi"), parser.Cls("[a-z]")))
	when.YouDoErr("Parens single", testParse("ParExpr", "(Jim)")).Expect(t, parser.Ref("Jim"))
	when.YouDoErr("JSON bug", testParse("Expr", `'"' (Plain / "\\u" Hex / "\\" Escape)* '"'`)).Expect(t, parser.Seq(parser.Lit(`"`), parser.Rep(parser.Alt(parser.Ref("Plain"), parser.Seq(parser.Lit(`\u`), parser.Ref("Hex")), parser.Seq(parser.Lit(`\`), parser.Ref("Escape")))), parser.Lit(`"`)))
}
