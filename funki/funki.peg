Grammar = (Declaration / Comment / WS EOL)* WS EOF
Declaration = Name WS Relation EOL
Relation = Pattern WS "->" WS Expression
Pattern = Param (WS Param)* / "(" WS Pattern WS ")".  #isn't this the deadly pattern?
Param = Name / Underbar / ListParam / Literal / TupleParam # maybe one day ObjectParam?
ListParam = "[" WS (Pattern (WS ":" WS Pattern)*)? WS "]"
TupleParam = "(" WS (Pattern (WS "," WS Pattern)*)? WS ")"
Expression = InfixExpr / TestExpr / ObjectExpr / ListExpr / TupleExpr / Call / Literal / "(" Expression ")"
TestExpr = "test" WS Expression (EOL Indent Relation)+
ListExpr = "[" WS (Expression (WS "," WS Expression)*)? WS "]"
TupleExpr = "(" WS (Expression (WS "," WS Expression)*)? WS ")"
ObjectExpr = "{" WS (KeyValue (WS "," WS KeyValue)*)? WS "}"
KeyValue = Name WS ":" WS Expression
InfixExpr = Dot / DotUnder / DotList / Concat / Push
Dot = Expression WS "." WS Name
DotUnder = Expression WS "._"
DotList = Expression WS ".[]" Name
Concat = Expression WS "++" WS Expression
Push = Expression WS ":" WS Expression
Call = Name Context?
Context = Expression (WS Expression)*

Literal = '"' (Escape / [^\\"])* '"'
Escape = "\\" Escaped                   # support match processing or literal parse or something like that
Escaped = [\\"nrt]
Name = [a-zA-Z] [a-zA-Z0-9_]* / "_"+ [a-zA-Z0-9_]+
Underbar = "_"
Comment = "#" (!EOL .)* EOL
Indent = [ \t]+
WS = [ \t]*
EOL = "\r\n" / [\n\r]
EOF = !.
